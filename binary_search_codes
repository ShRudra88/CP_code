 Binary search : sorted thakbe, bs on answer(array sorted thakena)
  sorted + element(k) thakle sure binary search
  just element(k) thakleo b s hoite pare


BINARY SEARCH 

vector<int> v(n); // vector must be sorted for binary search
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
    int to_find;
    cin >> to_find;

    int lo = 0, hi = n-1;

    int mid;
    while(hi-lo>1)
    {
        int mid = (hi + lo) /2 ;
        if(v[mid]<to_find)lo=mid+1;
        else hi=mid;
    }
    if(v[lo]==to_find)cout << lo <<endl;
    else if(v[hi]==to_find)cout << hi <<endl;
    else cout <<"NOt found "<<endl;



***FIND FIRST AND LAST POSITIONS OF AN ELEMENT IN A SORTED ARRAY:

Given a sorted array with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element x in the given array.
Example:  Input : arr[] = {1, 3, 5, 5, 5, 5 ,67, 123, 125}    ,x = 5
Output : First Occurrence = 2 & Last Occurrence = 5
// brute forse O(n) // bin search O(logn)
// bin s recursive
int first(int arr[], int low, int high, int x, int n)
{
	if (high >= low) {
		int mid = low + (high - low) / 2;
		if ((mid == 0 || x > arr[mid - 1]) && arr[mid] == x)
			return mid;
		else if (x > arr[mid])
			return first(arr, (mid + 1), high, x, n);
		else
			return first(arr, low, (mid - 1), x, n);
	}
	return -1;
}
int last(int arr[], int low, int high, int x, int n)
{
	if (high >= low) {
		int mid = low + (high - low) / 2;
		if ((mid == n - 1 || x < arr[mid + 1])
			&& arr[mid] == x)
			return mid;
		else if (x < arr[mid])
			return last(arr, low, (mid - 1), x, n);
		else
			return last(arr, (mid + 1), high, x, n);
	}
	return -1;
}
int main()
{
	int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
	int n = sizeof(arr) / sizeof(int);

	int x = 8;
	printf("First Occurrence = %d\t",
		first(arr, 0, n - 1, x, n));
	printf("\nLast Occurrence = %d\n",
		last(arr, 0, n - 1, x, n));
	return 0;
}
// bin search iterative for 1st & last element of an element
int first(int arr[], int x, int n)
{
	int low = 0, high = n - 1, res = -1;
	while (low <= high) {
		int mid = (low + high) / 2;

		if (arr[mid] > x)
			high = mid - 1;
		else if (arr[mid] < x)
			low = mid + 1;
		else {
			res = mid;
			high = mid - 1;
		}
	}
	return res;
}
int last(int arr[], int x, int n)
{
	int low = 0, high = n - 1, res = -1;
	while (low <= high) {
		int mid = (low + high) / 2;

		if (arr[mid] > x)
			high = mid - 1;
		else if (arr[mid] < x)
			low = mid + 1;
		else {
			res = mid;
			low = mid + 1;
		}
	}
	return res;
}
int main()
{
	int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
	int n = sizeof(arr) / sizeof(int);

	int x = 8;
	cout << "First Occurrence = " << first(arr, x, n);
	cout << "\nLast Occurrence = " << last(arr, x, n);

	return 0;
}
//inbuilt functions: ** upper bound & lower bound : tc O(n)
void findFirstAndLast(int arr[], int n, int x)
{
	int first, last;
	first = lower_bound(arr, arr + n, x) - arr;
	last = upper_bound(arr, arr + n, x) - arr - 1;

	if (first == n) {
		first = -1;
		last = -1;
	}
	cout << "First Occurrence = " << first
		<< "\nLast Occurrence = " << last;
}
int main()
{
	int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
	int n = sizeof(arr) / sizeof(int);
	int x = 8;
	findFirstAndLast(arr, n, x);
	return 0;
}


*** COUNT OF AN ELEMENT IN A SORTED ARRAY
Given a sorted array arr[] and a number x, write a function that counts the occurrences of x in arr[]. Expected time complexity is O(Logn)
Examples:

  Input: arr[] = {1, 1, 2, 2, 2, 2, 3,},   x = 2
  Output: 4 // x (or 2) occurs 4 times in arr[]

  Input: arr[] = {1, 1, 2, 2, 2, 2, 3,},   x = 3
  Output: 1 
ans = last_element - first_element + 1;


*** Number of Times a Sorted array is Rotated **


int findKRotation(vector<int> &arr) {
    int low = 0, high = arr.size() - 1;
    int ans = INT_MAX;
    int index = -1;
    while (low <= high) {
        int mid = (low + high) / 2;
        //search space is already sorted
        //then arr[low] will always be
        //the minimum in that search space:
        if (arr[low] <= arr[high]) {
            if (arr[low] < ans) {
                index = low;
                ans = arr[low];
            }
            break;
        }

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            // keep the minimum:
            if (arr[low] < ans) {
                index = low;
                ans = arr[low];
            }

            // Eliminate left half:
            low = mid + 1;
        }
        else { //if right part is sorted:

            // keep the minimum:
            if (arr[mid] < ans) {
                index = mid;
                ans = arr[mid];
            }

            // Eliminate right half:
            high = mid - 1;
        }
    }
    return index;
}

int main()
{
    vector<int> arr = {4, 5, 6, 7, 0, 1, 2, 3};
    int ans = findKRotation(arr);
    cout << "The array is rotated " << ans << " times.\n";
    return 0;
}



****Find an Element in a Rotated Sorted Array


#include <bits/stdc++.h>
using namespace std;

int search(vector<int>& arr, int n, int k) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;

        //if mid points the target
        if (arr[mid] == k) return mid;

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists:
                high = mid - 1;
            }
            else {
                //element does not exist:
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists:
                low = mid + 1;
            }
            else {
                //element does not exist:
                high = mid - 1;
            }
        }
    }
    return -1;
}

int main()
{
    vector<int> arr = {7, 8, 9, 1, 2, 3, 4, 5, 6};
    int n = 9, k = 1;
    int ans = search(arr, n, k);
    if (ans == -1)
        cout << "Target is not present.\n";
    else
        cout << "The index is: " << ans << "\n";
    return 0;
}

******Searching in a Nearly Sorted Array


#include <bits/stdc++.h>
using namespace std;

int binarySearch(int arr[], int l, int r, int x)
{
	if (r >= l) {
		int mid = l + (r - l) / 2;

		if (arr[mid] == x)
			return mid;
		if (mid > l && arr[mid - 1] == x)
			return (mid - 1);
		if (mid < r && arr[mid + 1] == x)
			return (mid + 1);

		if (arr[mid] > x)
			return binarySearch(arr, l, mid - 2, x);

		return binarySearch(arr, mid + 2, r, x);
	}

	return -1;
}
int main(void)
{
	int arr[] = { 3, 2, 10, 4, 40 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 4;
	int result = binarySearch(arr, 0, n - 1, x);
	(result == -1)
		? printf("Element is not present in array")
		: printf("Element is present at index %d", result);
	return 0;
}

****Find Floor of an element in a Sorted Array

#include <iostream>
using namespace std;

int findFloorSortedArray(int arr[], int n, int x){
   if (x >= arr[n - 1])
      return (n-1);
   if (x < arr[0])
      return -1;
   for (int i = 1; i < n; i++)
      if (arr[i] > x)
         return (i - 1);
   return -1;
}
int main(){
   int arr[] = {2, 5, 6, 8, 9, 12, 21, 25};
   int n = sizeof(arr) / sizeof(arr[0]);
   int x = 10;
   int floorIndex = findFloorSortedArray(arr, n - 1, x);
   if (floorIndex == -1)
      cout<<"The floor of "<<x<<" doesn't exist in the array";
   else
      cout<<"The floor of "<<x<<" in the array is "<<arr[floorIndex];
   return 0;
}

*****Ceil of an element in a Sorted Array

#include <bits/stdc++.h>
using namespace std;

int ceilSearch(int arr[], int low, int high, int x)
{
	int mid;
	if (x <= arr[low])
		return low;

	if (x > arr[high])
		return -1;


	if (arr[mid] == x)
		return mid;
	else if (arr[mid] < x) {
		if (mid + 1 <= high && x <= arr[mid + 1])
			return mid + 1;
		else
			return ceilSearch(arr, mid + 1, high, x);
	}
	else {
		if (mid - 1 >= low && x > arr[mid - 1])
			return mid;
		else
			return ceilSearch(arr, low, mid - 1, x);
	}
}
int main()
{
	int arr[] = { 1, 2, 8, 10, 10, 12, 19 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int x = 20;
	int index = ceilSearch(arr, 0, n - 1, x);
	if (index == -1)
		cout << "Ceiling of " << x
			<< " doesn't exist in array ";
	else
		cout << "ceiling of " << x << " is " << arr[index];

	return 0;
}
