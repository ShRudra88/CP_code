#include<bits/stdc++.h>
using namespace std;
// s_h_rudra88
#define fast() ios :: sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define  ll  long long int
#define  yes  cout<<"YES\n";
#define  no  cout<<"NO\n";
#define  max3(a,b,c)  max(max(a,b),c)
#define  min3(a,b,c)  min(min(a,b),c)
#define mod 1000000007
#define endl "\n"
void solve()
{
    ll n,m,num,i,j,a,b,c,d,e,x,y,l,r,rem;
    ll ans=0,k=0,sum=0,cnt=0,cnt1=0,maxi=INT_MIN,mini=INT_MAX;
    ll unknown=0,known=0;
    string s,s1;
    cin>>n;
    vector<ll>v;
	
    cout<<ans<<endl;
    return;
}
int main()
{
    fast();
    ll test;
    //solve();
    cin>>test;
    for( int i=1; i<=test; i++)
    {
        //cout<<"Case "<<i<<": ";
        solve();
    }
    return 0;
}


*** Sliding Window ** Aditya verma

**subarray + window size + largest thakle eta sliding window hoite pare
** substring/ subarray thakle sliding window hobe

https://www.geeksforgeeks.org/window-sliding-technique/
**Sliding window 2 types fixed size & variable size

fixed_window()
{
    int low = 0, high = 0, windowsize = k;
    while (high < sizeofarray)
    {
        // Step 1: Create a window that is one element smaller than the desired window size
        if (high - low + 1 < windowsize)
        {
            // Generate the window by increasing the high index
            high++;
        }
        // Step 2: Process the window
        else
        {
            // Window size is now equal to the desired window size
            // Step 2a: Calculate the answer based on the elements in the window
            // Step 2b: Remove the oldest element (at low index) from the window for the next window

            // Proceed to the next window by incrementing the low and high indices
        }
    }
}

variable_window()
{
    int start = 0, end = 0;
    while (end < n)
    {
        // Perform calculations or operations within the window

        /* Case 1: Expand the window
           If the window size is less than the desired value (k), increase the end index
        */
        if (end - start + 1 < k)
        {
            end++;
        }

        /* Case 2: Window of desired size
           If the window size is equal to the desired value (k), process the window and calculate the answer
        */
        else if (end - start + 1 == k)
        {
            // Perform the required calculations or operations to obtain the answer
            // Store the answer in a variable (ans)

            end++;
        }

        /* Case 3: Reduce the window size
           If the window size is greater than the desired value (k), adjust the window by moving the start index
        */
        else if (end - start + 1 > k)
        {
            while (end - start + 1 > k)
            {
                // Remove calculations or operations involving the element at the start index

                start++;
            }

            // Check if the window size becomes equal to the desired value (k) after adjustment
            if (end - start + 1 == k)
            {
                // Perform calculations or operations and store the answer if necessary
            }

            end++;
        }
    }

    // Return the final answer (ans)
}

**Maximum Sum Subarray of size K
Input:
N = 4, K = 4
Arr = [100, 200, 300, 400]
Output:1000
Explanation:Arr1 +Arr2+Arr3+Arr4 =1000,which is maximum.

long maximumSumSubarray(int K, vector<int> &Arr , int N)
{
        int i=0, j=0;
        long long ans=0,sum=0;
        while(j<N)
        {
            sum+=Arr[j];
            if(j-i+1<K)j++;
            else if(j-i+1==K)
            {
                ans=max(ans,sum);
                sum-=Arr[i];
                i++;
                j++;
            }
             ans=max(ans,sum);
        }
         ans=max(ans,sum);
        return ans;
       
}

**First Negative Number in every Window of Size K ( if there is no , then 0)
Input : N = 8, K = 3
A[] = {12, -1, -7, 8, -15, 30, 16, 28}
Output :-1 -1 -7 -15 -15 0 

vector<long long> printFirstNegativeInteger(long long int A[],long long int n, long long int k)
{
    vector<long long >v;
    queue<long long>q;
    int i=0,j=0;
    
    while(j<n)
    {
        if(A[j]<0)
        {
            q.push(A[j]);
        }
        if(j-i+1==k)
        {
            if(!q.empty())
            {
                v.push_back(q.front());
                if(A[i]<0)q.pop();
            }
            else v.push_back(0);
            i++;
        }
        j++;
    }
    return v;
}


** Count Occurrences Of Anagrams , 

Given a word pat and a text txt. Return the count of the occurrences of anagrams of the word in the text.
Input:txt = forxxorfxdofr, pat = for
Output: 3  ; Explanation: for, orf and ofr appears in the txt, hence answer is 3.

int search(string pat, string s)
    {
        unordered_map<char, int> um;
        for(int i=0; i<pat.size(); i++)
            um[pat[i]]++;

        int count = um.size();
        int i =0, j = 0, val = 0, k = pat.size(), n = s.size();
        while(j < n)
        {
            if(um.find(s[j]) != um.end())
            {
                um[s[j]]--;
                if(um[s[j]] == 0)
                    count--;
            }

            if(j-i+1 < k)
                j++;
            else
            {
                if(count == 0)
                    val++;
                if(um.find(s[i]) != um.end())
                {
                    if(um[s[i]] == 0)
                        count++;
                    um[s[i]]++;
                }

                i++, j++;
            }
        }
        return val;
    }

** Maximum of all subarrays of size k (brute forse : O(n2), sliding window : O(n)
Input 1: A = [1, 3, -1, -3, 5, 3, 6, 7], B = 3
Output 1: C = [3, 3, 5, 5, 6, 7] . 

vector<int> Solution::slidingMaximum(const vector<int> &A, int B) {
    vector<int> ans;
    list<int> l;
    int i{0},j{0};
   
    while(j < A.size()){
        while(l.size() > 0 && l.back() < A[j]){
            l.pop_back();
        }
        l.push_back(A[j]);
       
        if(j-i+1 < B){
            j++;
        }
        else{
            ans.push_back(l.front());
            if(A[i] == l.front()){
                l.pop_front();
            }
            i++;
            j++;
        }
       
    }
    return ans;
}

****Variable Size Sliding Window

**Largest Subarray of sum K
Given an array A, containing N positive integers and an integer K. Your task is to find the length of the longest Sub-Array with sum of the elements equal to the given value K.
For Input:
7 5  // 7 element , 5 is the sum
4 1 1 1 2 3 5
your output is: 4 .
int solve(vector<int> &A, const int &k)
{
    int n = A.size();
    int i = 0, j = 0, sum = 0;
    int mx = INT_MIN;
    while (j < n)
    {
        sum += A[j];
        if (sum < k)
        {
            j++;
        }
        else if (sum == k)
        {
            mx = max(mx, j - i + 1);
            j++;
        }
        else if (sum>k)
        {
            while(sum>k)
            {
                sum = sum - A[i];
                i++;
                if(sum==k)
                {
                    mx = max(mx,(j-i+1));
                }
            }
            j++;
        }

    }
    return mx;
}

** Longest Substring With K Unique Characters

Example:
Input: testcase : 2, t1: aabacbebebe 3, t2: aaaa 1
Output of t1: 7 , output of t2 : 4 
int longestKSubstr(string s, int k) {
        int i = 0, j = 0;
        int mx = -1;
        map<char,int>mp;
        int n = s.size();
        while (j < n)
        {
            mp[s[j]]++;
            if (mp.size() < k)
            {
                j++;
            }
            else if (mp.size() == k)
            {
                mx = max(mx, j - i + 1);
                j++;
            }
            else if (mp.size()>k)
            {
                while(mp.size()>k)
                {
                    mp[s[i]]--;
    
                    if(mp[s[i]]==0){
                        mp.erase(s[i]);
                    }
                    i++;
                    if(mp.size()==k)
                    {
                        mx = max(mx,(j-i+1));
                    }
                }
                j++;
            }

    }
    return mx;
}


***Longest Substring With Without Repeating Characters | Variable Size Sliding Window
Example:
Input: s = "pwwkew" , Output: 3
Explanation: The answer is "wke", with the length of 3.Notice that the answer must be a substring, "pwke" is a subsequence and not a substring
int lengthOfLongestSubstring(string s)
{
    int i = 0, j = 0;
    int mx = 0;
    map<char,int>mp;
    int n = s.size();
    while (j < n)
    {
        mp[s[j]]++;
        if(mp.size()==j-i+1)//mp.size()==j-i+1 means all character occur only one time
        {
            mx = max(mx, j-i+1);
            j++;
        }
        else if(mp.size()<j-i+1)
        {
            while(mp.size()<j-i+1)
            {
                mp[s[i]]--;
                if(mp[s[i]]==0)
                {
                    mp.erase(s[i]);
                }
                i++;

            }
            j++;
        }
        //cout<<mx<<endl;
    }
    return mx;
}

***Problem : John is at a toy store help him pick maximum number of toys. He can only select in a continuous manner and he can select only two types of toys.
Example:
Input:
1
abaccab
ans : longest substirng of 2 characters,

**Minimum Window Substring
Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string "".
Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.
Example 1:Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Example 2:Input: s = "a", t = "a"
Output: "a"
string minWindow(string s, string t)
{
    unordered_map<char, int> mp;
    int mini=INT_MAX, start=0;
    for(auto ch:t)
    {
        mp[ch]++;
    }
    int i=0,j=0,count=mp.size();
    while(j<s.length())
    {
        if(mp.find(s[j])!=mp.end())
        {
            mp[s[j]]--;
            if(mp[s[j]]==0)
                count--;
        }

        while(count==0)
        {
            if(mp.find(s[i])!=mp.end())
            {
                mp[s[i]]++;
                if(mp[s[i]]==1)
                {
                    count++;
                    if(j-i+1<mini)
                    {
                        mini=j-i+1;
                        start=i;
                    }
                }
            }
            i++;
        }
        j++;
    }
    if(mini==INT_MAX) return "";
    return s.substr(start, mini);
}
// end of sliding window


***  // 2 pointer // wrong submission youtube ***
#include<bits/stdc++.h>
using namespace std;
// Find the pair whose sum is equal to x
int v1, v2;
bool solve(int aa[], int n, int x)
{
    int i=0;
    int j=n-1;
    while(i<j)
    {
        int sum = aa[i]+aa[j];
        if(sum==x){
                v1=aa[i];
                v2 = aa[j];
                return true;
        }
        if(sum<x)i++;
        else j--;
    }
    return false;
}

int main()
{
    int n, x;
    cin>>n>>x;
    int aa[n];
    for(int i=0;i<n;i++){
        cin>>aa[i];
    }
    sort(aa, aa+n);
    bool ans = solve(aa, n, x);

    if(ans){
            cout<<"YES\n";
            cout<<v1<<" "<<v2<<endl;
    }
    else cout<<"NO\n";

    return 0;
}
// ** Find the pair in Array Whose sum is closest to X

void solve(int aa[], int n, int x)
{
    int l=0;
    int r = n-1;
    int ind1, ind2;
    int dif = INT_MAX;

    while(l<r)
    {
        int sum = aa[l]+aa[r];
        if(abs(sum-x)<dif)
        {
            ind1 = l;
            ind2 = r;

            dif = abs(sum-x);
        }
        if(sum>x)r--;
        else l++;
    }
    cout<<aa[ind1]<<" "<<aa[ind2]<<" "<<aa[ind1]+aa[ind2]<<endl; // print the two number & their sum
}

int main()
{
    int n, x, i;
    cin>>n;
    int aa[n];

    for(i=0;i<n;i++)cin>>aa[i];

    cin>>x;  // closest sum to x

    sort(aa, aa+n);

    solve(aa, n, x);

    return 0;
}

// ** Find the closest pair from two arrays

void solve(int aa[],int bb[], int n, int m,  int x)
{
    int l=0;
    int r = n-1;
    int ind1, ind2;
    int dif = INT_MAX;

    while(l<n && r>=0)
    {
        int sum = aa[l]+aa[r];
        if(abs(sum-x)<dif)
        {
            ind1 = l;
            ind2 = r;

            dif = abs(sum-x);
        }
        if(sum>x)r--;
        else l++;
    }
    cout<<"("<<aa[ind1]<<" + "<<bb[ind2]<<") = "<<aa[ind1]+bb[ind2]<<endl;  // print the two number & their sum
}

int main()
{
    int n, x, i,m;
    cin>>n;
    int aa[n];

    for(i=0;i<n;i++)cin>>aa[i];
    cin>>m;
    int bb[m];

    for(i=0;i<m;i++)cin>>bb[i];

    cin>>x;  // closest sum to x

    sort(aa, aa+n);
    sort(bb, bb+n);

    solve(aa,bb, n, m, x);

    return 0;
}

#include<bits/stdc++.h>
using namespace std;

//Find all triplets with zero sum
void solve(int aa[], int n)
{
    int i, j;
    for(i=0;i<n-1;i++)
    {
        unordered_set<int>se;
        for(j=i+1;j<n;j++)
        {
            int a = aa[i]+aa[j];
            a = -a;
            if(se.find(a)!=se.end())
            {
                cout<<"{ "<<aa[i]<<" "<<aa[j]<<" "<<a<<" }"<<endl;
            }
            else se.insert(aa[j]);
        }
    }
}

int main()
{
    int n,i;
    cin>>n;
    int aa[n];
    for(i=0;i<n;i++)
    {
        cin>>aa[i];
    }
    solve(aa, n);


    return 0;
}


//Find a triplet that sum to a given value
/* input output

6 7
1 2 4 6 3 0
0 1 6
0 3 4
1 2 4
*/
void solve(int aa[], int n, int x)
{
    int i, j, cnt=0;;
    for(i=0;i<n;i++)
    {
        int l = i+1;
        int r = n-1;
        while(l<r)
        {
            int sum = aa[i]+aa[l]+aa[r];
            if(sum==x)
            {
                cnt++;
                cout<<aa[i]<<" "<<aa[l]<<" "<<aa[r]<<endl;
            }
            if(sum>x)r--;
            else l++;
        }
    }
    if(cnt==0)cout<<"Not found\n";
}

int main()
{
    int n,x,i;
    cin>>n>>x;
    int aa[n];
    for(i=0;i<n;i++)
    {
        cin>>aa[i];
    }
    sort(aa, aa+n);
    solve(aa, n, x);
    return 0;
}


//**Find four elements that sum to a given value
/* 9 16
2 2 4 4 6 6 8 8 0
0 2 6 8
0 2 6 8
0 2 6 8
0 2 6 8
0 4 4 8
0 4 6 6
0 4 6 6
2 2 4 8
2 2 4 8
2 2 6 6
2 4 4 6
2 4 4 6


*/
void solve(int aa[], int n, int x)
{
    int i, j, cnt=0;;
    for(i=0; i<n; i++)
    {
        for(j=i+1; j<n; j++)
        {
            int l = j+1;
            int r = n-1;
            while(l<r)
            {
                int sum = aa[i]+aa[j]+aa[l]+aa[r];
                if(sum==x)
                {
                    cnt++;
                    cout<<aa[i]<<" "<<aa[j]<<" "<<aa[l]<<" "<<aa[r]<<endl;
                }
                if(sum>x)r--;
                else l++;
            }
        }
    }
    if(cnt==0)cout<<"Not found\n";
}

int main()
{
    int n,x,i;
    cin>>n>>x;
    int aa[n];
    for(i=0; i<n; i++)
    {
        cin>>aa[i];
    }
    sort(aa, aa+n);
    solve(aa, n, x);
    return 0;
}

Erasing an element:
m.erase(val); //Erases the pair from the map where the key_type is val.
Finding an element:

map<string,int>::iterator itr=m.find(val); //Gives the iterator to the element val if it is found otherwise returns m.end() .
Ex: map<string,int>::iterator itr=m.find("Maps"); //If Maps is not present as the key value then itr==m.end().
Accessing the value stored in the key:

To get the value stored of the key "MAPS" we can do m["MAPS"] or we can get the iterator using the find function and then by itr->second we can access the value.

//unknown number of input : while (cin >> a){}


 *****CODEBOOK Start******
//count 1 in a string
int a=count(s.begin(),s.end(),'1');

// 2 to power n kina check
if((n&(n-1))==0)yes;

// add a value at beginning in vector

v.insert (v.begin(), value);

// length of a digit n
int length = to_string(n).size();
//*** digit sum
int dg_sm(int x){ return x == 0 ? 0 : x % 10 + dg_sm(x / 10);}

// to find mid element
int mid(int x, int y, int z)
{
    return x + y + z - min({x, y, z}) - max({x, y, z});
}

// ** to find MEX  //MEX of a set of integers c1,c2,…,ck is defined as the smallest non-negative integer x which does not occur in the set c
    ll mex=0;
    while(se.count(mex))mex++; // se -> set


  *** string ****

    //string input with space
     cin.ignore(); // 1st e space thakle eta use korte hbe  
     string s;
    getline(cin, s);

// string erase
   s = "Sakhawat";
   s.erase(s.begin+1,s.begin()+3);
   s=shawat
   s=to_string(n); // int to string
   a=stoi(s);  // string to int
   string s = "dog:cat";
    // Find position of ':' using find()
    int pos = s.find(":");
    // Copy substring after pos
    string sub = s.substr(pos + 1);
	cout << "String is: " << sub;
    // prints the result
    // Copy substring before pos
    string sub = s.substr(0 , pos);
    cout << "String is: " << sub;

	string r = s1.substr(3, 2);
//to all uppercase of string s: transform(s.begin(), s.end(), s.begin(), ::toupper);
//to all lowercase of string s: transform(s.begin(), s.end(), s.begin(), ::tolower);

//To exclude duplicate characters, you can, for example, use the unique function in C++.
s.erase(unique(s.begin(), s.end()), s.end());

// **Conversion into Binary code
    auto number = 0b011;
    cout << number;  // bin to int

// decimal to binary
string dec_to_bin(int n) {
    string ret = "";
    for (int i = 31; i >= 0; i--) { // 32bit
        int k = 1 << i;
        ret += (n & k)? '1' : '0';
    }
    return ret;
}

//using cpp fuction
num = 15;
n = (int)(log2(num));
cout<< bitset<64>(num).to_string().substr(64 - n - 1);

// binary to decimal
int bin_to_dec(string s) {
    int ret = 0;
    for (int i = 0; i < 32; i++) 
        ret = (2*ret) + s[i] - '0';
    return ret;
}

//using cpp fuction
cout << stoi(s, 0, 2);// s is a binari string

//Palindrome cheque :
bool palindrome( string s)
{
    int n = s.length();
    for(int i=0;i<n;i++)
    {
        if(s[i]!=s[n-i-1])return false;
    }
    return true;
}

//all substring of s
void sub_string(string s, int n)
{
    for(int i=0;i<n;i++)
    {
        for(int j=1;j<=n-i;j++)
        {
            cout<<s.substr(i,j)<<endl;
        }
    }
}
int main()
{
    fast();
    string s;
    cin>>s;
    sub_string(s,s.size());
    return 0;
}

*** stl vector ****

// max element in vector
  *max_element(a.begin(), a.end())

// vector sorted kina
is_sorted(v.begin(),v.end()); // o/1 return kore

// last element in vector 
    v.back();
// to remove last element
    v.pop_back();

///Removes the element present at position.  
v.erase(v.begin()+4); (erases the fifth element of the vector v)

//Removes the elements in the range from start to end inclusive of the start and exclusive of the end.
v.erase(v.begin()+2,v.begin()+5);(erases all the elements from the third element to the fifth element.)

// n times A in a string declaration
  string s(n, 'A');
// string array input
	string aa[n];
        for(i=0;i<n;i++)cin>>aa[i];
// all element of ara declaring 0 
    int n;
    int aa[n]={0};
// array size
arrSize = sizeof(arr)/sizeof(arr[0]);

// string sort : sort(s.begin(),s.end());

****// all permutation print
  s="abcde";
  do{
   cout<<s<<endl;
   }while(next_permutation(s.begin(),s.end()));


 ***//it will calculate factorial for n
int cal_n(int n){
   int temp = 1;
   for (int i = 2; i <= n; i++)
      temp = temp * i;
   return temp;
}
***//function to calculate ncr
int nCr(int n, int r){
   return cal_n(n) / (cal_n(r) * cal_n(n - r)); //nCr = (n!)/(r!*(n-r)!)
                     
}
int nPr(int n, int r)
{
    return cal_n(n)/(cal_n(n-r)); ////nPr = n!/(n-r)!
}  
    
// *** big nmbr factorial ***
int abc(int x, int res[], int r)
{
    int i,c=0,p;

    for (i=0; i<r; i++)
    {
        p = res[i] * x + c;
        res[i] = p % 10;
        c  = p/10;
    }
    while (c)
    {
        res[r] = c%10;
        c = c/10;
        r++;
    }
    return r;
}
void fact(int n)
{
    int res[160],x,i;

    res[0] = 1;
    int r = 1;

    for (x=2; x<=n; x++)
        r = abc(x, res, r);
    for(i=r-1; i>=0; i--)
        cout << res[i];
}


// ** big int string sum ***
string find_sum(string s1, string s2)
{
    string s;
    int n1 = s1.length(), n2 = s2.length();

    if(n1>n2)swap(s1,s2);

    reverse(s1.begin(), s1.end());
    reverse(s2.begin(), s2.end());


    int carry = 0;

    for(int i=0; i<n1; i++)
    {
        int sum = ((s1[i]-'0')+(s2[i]-'0')+carry);
        s.push_back(sum%10 + '0');

        carry = sum/10;
    }
    for(int i=n1; i<n2; i++)
    {
        int sum = ((s2[i]-'0')+carry);
        s.push_back(sum%10 + '0');

        carry = sum/10;
    }
    if(carry)s.push_back(carry + '0');

    reverse(s.begin(),s.end());

    return s;
}
// calculate ncr  // nCr=n! / r! n-r!
ll dp[35][35];
ll ncr(int n,int r){
    if(n==r || r==0)return 1;
    else if(r==1)return n;
    else if(dp[n][r]!=(-1))return dp[n][r];
    dp[n][r]=ncr(n-1,r)+ncr(n-1,r-1);
    return dp[n][r];

}

 // *** Bit manipulation ****

//This function is used to count the number of one’s(set bits) in an integer.
printf("Count of 1s in binary of %d is %d ",n, __builtin_popcount(n));


// Function to get the bit at the
// ith position
bool getBit(int num, int i)
{
	// Return true if the ith bit is set. Otherwise return false
	return ((num & (1 << i)) != 0);
}

// Function to set the ith bit of the
// given number num
int setBit(int num, int i)
{
	// Sets the ith bit and return
	// the updated value
	return num | (1 << i);
}

// Function to clear the ith bit of
// the given number N
int clearBit(int num, int i)
{

	// Create the mask for the ith
	// bit unset
	int mask = ~(1 << i);

	// Return the update value
	return num & mask;
}

// Driver Code
int main()
{
	// Given number N
	int N = 70;

	cout << "The bit at the 3rd position from LSB is: "
		<< (getBit(N, 3) ? '1' : '0')
		<< endl;

	cout << "The value of the given number "
		<< "after setting the bit at "
		<< "LSB is: "
		<< setBit(N, 0) << endl;

	cout << "The value of the given number "
		<< "after clearing the bit at "
		<< "LSB is: "
		<< clearBit(N, 0) << endl;

	return 0;
}


//The Quickest way to swap two numbers:
a ^= b;
b ^= a; 
a ^= b;


           *****CODEBOOK END ******

// Handaling big integer in cpp
#include<iostream>
#include <boost/multiprecision/cpp_int.hpp>
using namespace boost::multiprecision;
using namespace std;
int128_t large_product(long long n1, long long n2) {
   int128_t ans = (int128_t) n1 * n2;
   return ans;
}
int main() {
   long long num1 = 98745636214564698;
   long long num2 = 7459874565236544789;
   cout << "Product of "<< num1 << " * "<< num2 << " = " <<
   large_product(num1,num2);
}
Output
Product of 98745636214564698 * 7459874565236544789 =
736630060025131838840151335215258722


//// *** Some algorithm sorting & searching ****

1.  @@@@@@@@@@@@@@@@@@@@@@  Selection sort  ########################

#include <stdio.h>
int main()
{
  int array[100], n, c, d, position, t;

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  for (c = 0; c < (n - 1); c++) // finding minimum element (n-1) times
  {
    position = c;

    for (d = c + 1; d < n; d++)
    {
      if (array[position] > array[d])
        position = d;
    }
    if (position != c)
    {
      t = array[c];
      array[c] = array[position];
      array[position] = t;
    }
  }

  printf("Sorted list in ascending order:\n");

  for (c = 0; c < n; c++)
    printf("%d\n", array[c]);

  return 0;
}



2.  @@@@@@@@@@@@@@@@@@@@@@@@@@  BINARY search  ######################

#include <stdio.h>
int main()
{
  int c, first, last, middle, n, search, array[100];

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  printf("Enter value to find\n");
  scanf("%d", &search);

  first = 0;
  last = n - 1;
  middle = (first+last)/2;

  while (first <= last) {
    if (array[middle] < search)
      first = middle + 1;
    else if (array[middle] == search) {
      printf("%d found at location %d.\n", search, middle+1);
      break;
    }
    else
      last = middle - 1;

    middle = (first + last)/2;
  }
  if (first > last)
    printf("Not found! %d isn't present in the list.\n", search);

  return 0;
}


 3.  @@@@@@@@@@@@@@@@   Insertion sort   #################
#include <stdio.h>

int main()
{
  int n, array[1000], c, d, t, flag = 0;

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  for (c = 1 ; c <= n - 1; c++) {
    t = array[c];

    for (d = c - 1 ; d >= 0; d--) {
      if (array[d] > t) {
        array[d+1] = array[d];
        flag = 1;
      }
      else
        break;
    }
    if (flag)
      array[d+1] = t;
  }

  printf("Sorted list in ascending order:\n");

  for (c = 0; c <= n - 1; c++) {
    printf("%d\n", array[c]);
  }

  return 0;
}


#include<stdio.h>
int main(){

   int i, j, count, temp, number[25];

   printf("How many numbers u are going to enter?: ");
   scanf("%d",&count);

   printf("Enter %d elements: ", count);
   for(i=0;i<count;i++)
      scanf("%d",&number[i]);

   for(i=1;i<count;i++){
      temp=number[i];
      j=i-1;
      while((temp<number[j])&&(j>=0)){
         number[j+1]=number[j];
         j=j-1;
      }
      number[j+1]=temp;
   }

   printf("Order of Sorted elements: ");
   for(i=0;i<count;i++)
      printf(" %d",number[i]);

   return 0;
}

4.   @@@@@@@@@@@@@@@@ Bubble sort ##############

#include <stdio.h>
int main()
{
  int array[100], n, c, d, swap;

  printf("Enter number of elements\n");
  scanf("%d", &n);

  printf("Enter %d integers\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  for (c = 0 ; c < n - 1; c++)
  {
    for (d = 0 ; d < n - c - 1; d++)
    {
      if (array[d] > array[d+1]) /* For decreasing order use '<' instead of '>' */
      {
        swap       = array[d];
        array[d]   = array[d+1];
        array[d+1] = swap;
      }
    }
  }

  printf("Sorted list in ascending order:\n");

     for (c = 0; c < n; c++)
        printf("%d\n",array[c]);

  return 0;
}

5. ################## Linear search ***************

#include <stdio.h>
int main()
{
  int array[100], search, c, n;

  printf("Enter number of elements in array\n");
  scanf("%d", &n);

  printf("Enter %d integer(s)\n", n);

  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);

  printf("Enter a number to search\n");
  scanf("%d", &search);

  for (c = 0; c < n; c++)
  {
    if (array[c] == search)    /* If required element is found */
    {
      printf("%d is present at location %d.\n", search, c+1);
      break;
    }
  }
  if (c == n)
    printf("%d isn't present in the array.\n", search);

  return 0;
}

6. ###################### Stack  ********************
// CPP program to demonstrate working of STL stack
#include <bits/stdc++.h>
using namespace std;

void showstack(stack <int> s)
{
	while (!s.empty())
	{
		cout << '\t' << s.top();
		s.pop();
	}
	cout << '\n';
}

int main ()
{
	stack <int> s;
	s.push(10);
	s.push(30);
	s.push(20);
	s.push(5);
	s.push(1);

	cout << "The stack is : ";
	showstack(s);

	cout << "\ns.size() : " << s.size();
	cout << "\ns.top() : " << s.top();


	cout << "\ns.pop() : ";
	s.pop();
	showstack(s);

	return 0;
}


#include<stdio.h>

#include<stdlib.h>
 
#define Size 4 
 
int Top=-1, inp_array[Size];
void Push();
void Pop();
void show();
 
int main()
{
	int choice;
	
	while(1)	
	{
		printf("\nOperations performed by Stack");
		printf("\n1.Push the element\n2.Pop the element\n3.Show\n4.End");
		printf("\n\nEnter the choice:");
		scanf("%d",&choice);
		
		switch(choice)
		{
			case 1: Push();
					break;
			case 2: Pop();
					break;
			case 3: show();
					break;
			case 4: exit(0);
			
			default: printf("\nInvalid choice!!");
		}
	}
}
 
void Push()
{
	int x;
	
	if(Top==Size-1)
	{
		printf("\nOverflow!!");
	}
	else
	{
		printf("\nEnter element to be inserted to the stack:");
		scanf("%d",&x);
		Top=Top+1;
		inp_array[Top]=x;
	}
}
 
void Pop()
{
	if(Top==-1)
	{
		printf("\nUnderflow!!");
	}
	else
	{
		printf("\nPopped element:  %d",inp_array[Top]);
		Top=Top-1;
	}
}
 
void show()
{
	
	
	if(Top==-1)
	{
		printf("\nUnderflow!!");
	}
	else
	{
		printf("\nElements present in the stack: \n");
		for(int i=Top;i>=0;--i)
			printf("%d\n",inp_array[i]);
	}
}



7.################### QUEUE *********************

/* Below program is written in C++ language */

#include<iostream>

using namespace std;

#define SIZE 10

class Queue
{
    int a[SIZE];
    int rear;   //same as tail
    int front;  //same as head
  
    public:
    Queue()
    {
        rear = front = -1;
    }
    
    //declaring enqueue, dequeue and display functions
    void enqueue(int x);     
    int dequeue();
    void display();
};

// function enqueue - to add data to queue
void Queue :: enqueue(int x)
{
    if(front == -1) {
        front++;
    }
    if( rear == SIZE-1)
    {
        cout << "Queue is full";
    }
    else
    {
        a[++rear] = x;
    }
}

// function dequeue - to remove data from queue
int Queue :: dequeue()
{
    return a[++front];  // following approach [B], explained above
}

// function to display the queue elements
void Queue :: display()
{
    int i;
    for( i = front; i <= rear; i++)
    {
        cout << a[i] << endl;
    }
}

// the main function
int main()
{
    Queue q;
    q.enqueue(10);
    q.enqueue(100);
    q.enqueue(1000);
    q.enqueue(1001);
    q.enqueue(1002);
    q.dequeue();
    q.enqueue(1003);
    q.dequeue();
    q.dequeue();
    q.enqueue(1004);
    
    q.display();
    
    return 0;
}


*********  Queue in c***********
#include<stdio.h>

#define Q_SIZE 5

typedef struct
{
    int data[Q_SIZE + 1];
    int head, tail;
}Queue;


void enqueue(Queue *q, int item)
{
    if((q->tail + 1)%(Q_SIZE + 1)==q->head)
    {
        printf("Queue is full\n");
        return;
    }
    q->data[q->tail] = item;
    q->tail = (q->tail + 1)%(Q_SIZE + 1);
}

int dqueue(Queue *q)
{
    int item;

    if(q->tail == q->head)
    {
        printf("Queue is full\n");
        return -1;
    }
    item = q->data[q->head];

    q->head = (q->head+1)%(Q_SIZE + 1);

    return item;
}

int main()
{
    Queue my_q;
    int item;

    my_q.head = 0;
    my_q.tail = 0;

    enqueue(&my_q, 1);
    printf("tail = %d\n",my_q.tail);

    enqueue(&my_q, 2);
    printf("tail = %d\n",my_q.tail);

    enqueue(&my_q, 3);
    printf("tail = %d\n",my_q.tail);

    enqueue(&my_q, 4);
    printf("tail = %d\n",my_q.tail);

    enqueue(&my_q, 5);
    printf("tail = %d\n",my_q.tail);

    enqueue(&my_q, 6);
    printf("tail = %d\n",my_q.tail);



    printf("beginning head = %d\n",my_q.head);
    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);

    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);

    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);

    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);

    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);

    item = dqueue(&my_q);
    printf("item = %d, head = %d\n",item,my_q.head);
}





 8.@@@@@@@@@@@@@@@@   Merge sort in C++     ##################

#include <iostream>
using namespace std;

// Merge two subarrays L and M into arr
void merge(int arr[], int p, int q, int r) {
  
  // Create L ← A[p..q] and M ← A[q+1..r]
  int n1 = q - p + 1;
  int n2 = r - q;

  int L[n1], M[n2];

  for (int i = 0; i < n1; i++)
    L[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    M[j] = arr[q + 1 + j];

  // Maintain current index of sub-arrays and main array
  int i, j, k;
  i = 0;
  j = 0;
  k = p;

  // Until we reach either end of either L or M, pick larger among
  // elements L and M and place them in the correct position at A[p..r]
  while (i < n1 && j < n2) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = M[j];
      j++;
    }
    k++;
  }

  // When we run out of elements in either L or M,
  // pick up the remaining elements and put in A[p..r]
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = M[j];
    j++;
    k++;
  }
}

// Divide the array into two subarrays, sort them and merge them
void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    // m is the point where the array is divided into two subarrays
    int m = l + (r - l) / 2;

    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);

    // Merge the sorted subarrays
    merge(arr, l, m, r);
  }
}

// Print the array
void printArray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << " ";
  cout << endl;
}

// Driver program
int main() {
  int arr[] = {6, 5, 12, 10, 9, 1};
  int size = sizeof(arr) / sizeof(arr[0]);

  mergeSort(arr, 0, size - 1);

  cout << "Sorted array: \n";
  printArray(arr, size);
  return 0;
}






9.@@@@@@@@@@@@@@@@@@@@ Quick Sort  ##############
/* C++ implementation of QuickSort */
#include <bits/stdc++.h>
using namespace std; 
  
// A utility function to swap two elements 
void swap(int* a, int* b) 
{ 
    int t = *a; 
    *a = *b; 
    *b = t; 
} 
  
/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */
int partition (int arr[], int low, int high) 
{ 
    int pivot = arr[high]; // pivot 
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
  
    for (int j = low; j <= high - 1; j++) 
    { 
        // If current element is smaller than the pivot 
        if (arr[j] < pivot) 
        { 
            i++; // increment index of smaller element 
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
} 
  
/* The main function that implements QuickSort 
arr[] --> Array to be sorted, 
low --> Starting index, 
high --> Ending index */
void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        /* pi is partitioning index, arr[p] is now 
        at right place */
        int pi = partition(arr, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i = 0; i < size; i++) 
        cout << arr[i] << " "; 
    cout << endl; 
} 
  
// Driver Code
int main() 
{ 
    int arr[] = {10, 7, 8, 9, 1, 5}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    quickSort(arr, 0, n - 1); 
    cout << "Sorted array: \n"; 
    printArray(arr, n); 
    return 0; 
} 
/* C++ implementation of QuickSort */
#include <bits/stdc++.h>
using namespace std; 
  
// A utility function to swap two elements 
void swap(int* a, int* b) 
{ 
    int t = *a; 
    *a = *b; 
    *b = t; 
} 
  
/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */
int partition (int arr[], int low, int high) 
{ 
    int pivot = arr[high]; // pivot 
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
  
    for (int j = low; j <= high - 1; j++) 
    { 
        // If current element is smaller than the pivot 
        if (arr[j] < pivot) 
        { 
            i++; // increment index of smaller element 
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
} 
  
/* The main function that implements QuickSort 
arr[] --> Array to be sorted, 
low --> Starting index, 
high --> Ending index */
void quickSort(int arr[], int low, int high) 
{ 
    if (low < high) 
    { 
        /* pi is partitioning index, arr[p] is now 
        at right place */
        int pi = partition(arr, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
  
/* Function to print an array */
void printArray(int arr[], int size) 
{ 
    int i; 
    for (i = 0; i < size; i++) 
        cout << arr[i] << " "; 
    cout << endl; 
} 
  
// Driver Code
int main() 
{ 
    int arr[] = {10, 7, 8, 9, 1, 5}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    quickSort(arr, 0, n - 1); 
    cout << "Sorted array: \n"; 
    printArray(arr, n); 
    return 0; 
} 


*****DYNAMIC PROGRAMMING **********
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+10;
int dp[N];
// nth fibonacci using dp
// dp top down aproach
int fib(int n)
{
    if(n==0)return 0;
    if(n==1)return 1;

    if(dp[n] != -1)return dp[n];

    return dp[n]=fib(n-1)+fib(n-2);
}

int main()
{
    memset(dp, -1, sizeof(dp));
    int n;
    cin >> n;
    cout << fib(n);
}
